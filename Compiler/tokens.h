enum TOKENS {
	TOKEN_ID = 0,
	TOKEN_CONST_INT,
	TOKEN_CONST_FLOAT,
	TOKEN_CONST_STRING,
	TOKEN_COMMA = 100,
	TOKEN_COLON,
	TOKEN_SEMICOLON,
	TOKEN_LEFT_PARENTHESIS,
	TOKEN_RIGHT_PARENTHESIS,
	TOKEN_LEFT_BRACKET,
	TOKEN_RIGHT_BRACKET,
	TOKEN_LEFT_BRACE,
	TOKEN_RIGHT_BRACE,
	TOKEN_LOGICAL_NOT = 200,
	TOKEN_BITWISE_NOT,
	TOKEN_ADD = 300,
	TOKEN_SUB,
	TOKEN_MUL,
	TOKEN_DIV,
	TOKEN_MOD,
	TOKEN_XOR,
	TOKEN_BITWISE_AND,
	TOKEN_BITWISE_OR,
	TOKEN_LOGICAL_AND,
	TOKEN_LOGICAL_OR,
	TOKEN_LT = 400,
	TOKEN_GT,
	TOKEN_LTE,
	TOKEN_GTE,
	TOKEN_EQ,
	TOKEN_NEQ,
	TOKEN_ASSIGN = 500,
	TOKEN_ASSIGN_ADD,
	TOKEN_ASSIGN_SUB,
	TOKEN_ASSIGN_MUL,
	TOKEN_ASSIGN_DIV,
	TOKEN_ASSIGN_MOD,
	TOKEN_ASSIGN_XOR,
	TOKEN_BOOL = 600,
	TOKEN_BREAK,
	TOKEN_CASE,
	TOKEN_CONST,
	TOKEN_CONTINUE,
	TOKEN_DEFAULT,
	TOKEN_ELSE,
	TOKEN_FALSE,
	TOKEN_FOR,
	TOKEN_FUNC,
	TOKEN_GO,
	TOKEN_IF,
	TOKEN_IMPORT,
	TOKEN_INT,
	TOKEN_NIL,
	TOKEN_PRINT,
	TOKEN_PRINTLN,
	TOKEN_REAL,
	TOKEN_RETURN,
	TOKEN_STRING,
	TOKEN_STRUCT,
	TOKEN_SWITCH,
	TOKEN_TRUE,
	TOKEN_TYPE,
	TOKEN_VAR,
	TOKEN_VOID,
	TOKEN_WHILE,
};

const char * token_get_symbols(enum TOKENS);
void token_pretty_print(enum TOKENS, const char *);
void token_dump_string(const char *);
